# Sample dev compose that runs Rails + Postgres

services:
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: app_development
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d app_development" ]
      interval: 5s
      timeout: 5s
      retries: 20

  web:
    build:
      context: .
      dockerfile: Dockerfile.dev
    # ВАЖНО: монтируем именно корень проекта в /app
    volumes:
      - .:/app:cached
      - bundle:/bundle
    working_dir: /app
    environment:
      RAILS_ENV: development
      DATABASE_HOST: db
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: app_development
      DATABASE_URL: postgres://postgres:postgres@db:5432/app_development
      RAILS_LOG_TO_STDOUT: "1"
      NODE_ENV: development
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "3000:3000"

  nginx:
    image: nginx:1.27-alpine
    depends_on:
      web:
        condition: service_started
    ports:
      - "80:80"
    volumes:
      # Статический конфиг — ТОЛЬКО server { } (см. ниже)
      - ./nginx/app.conf:/etc/nginx/conf.d/default.conf:ro

  assets:
    build:
      context: .
      dockerfile: Dockerfile.dev
    working_dir: /app
    environment:
      NODE_ENV: development
    command: >
      bash -lc '
        yarn install;
        trap "kill 0" TERM INT;
        yarn build:watch &            # esbuild --watch
        yarn build:css:watch &        # sass --watch
        wait
      '
    volumes:
      - .:/app:cached
      - bundle:/bundle
    depends_on:
      web:
        condition: service_started
volumes:
  pgdata:
  bundle:

    # services:
    #   db:
    #     image: postgres:16-alpine
    #     environment:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: postgres
    #       POSTGRES_DB: app_development
    #     volumes:
    #       - pgdata:/var/lib/postgresql/data
    #     healthcheck:
    #       test: [ "CMD-SHELL", "pg_isready -U postgres -d app_development" ]
    #       interval: 5s
    #       timeout: 5s
    #       retries: 20

    #   web:
    #     build:
    #       context: .
    #       dockerfile: Dockerfile.dev
    #     ports:
    #       - "3000:3000"
    #     volumes:
    #       - .:/rails
    #     environment:
    #       RAILS_ENV: development
    #       DATABASE_URL: postgres://postgres:postgres@db:5432/app_development
    #     depends_on:
    #       db:
    #         condition: service_healthy

    #   nginx:
    #     build:
    #       context: ./nginx
    #       dockerfile: Dockerfile.nginx
    #     ports:
    #       - "80:80"
    #     environment:
    #       SERVER_NAME: wtcalc.example.com # домен/сабдомен
    #       UPSTREAM_HOST: web # можно IP, например 192.168.1.50
    #       UPSTREAM_PORT: "3000"
    #       # REAL_IP_FROM: 10.0.0.0/8          # если нужно доверять X-Forwarded-For
    #     depends_on:
    #       web:
    #         condition: service_started
    #     volumes:
    #       - ./nginx/app.conf:/etc/nginx/conf.d/default.conf:ro
    #   #   nginx:
    #   #     image: nginx:1.27-alpine
    #   #     depends_on:
    #   #       web:
    #   #         # condition: service_healthy
    #   #         condition: service_started
    #   #     ports:
    #   #       - "80:80"
    #   #     volumes:
    #   #       - ./nginx/app.conf:/etc/nginx/conf.d/default.conf:ro
    #   #     # healthcheck:
    #   #     #   test: [ "CMD-SHELL", "curl -fsS http://app.localhost/health || exit 1" ]
    #   #     #   interval: 10s
    #   #     #   timeout: 3s
    #   #     #   retries: 20

    # volumes:
    #   pgdata:

    # OLD

    # services:
    #   db:
    #     image: postgres:16-alpine
    #     environment:
    #       POSTGRES_USER: postgres
    #       POSTGRES_PASSWORD: postgres
    #       POSTGRES_DB: app_development
    #     volumes:
    #       - pgdata:/var/lib/postgresql/data
    #     healthcheck:
    #       test: [ "CMD-SHELL", "pg_isready -U postgres -d app_development" ]
    #       interval: 5s
    #       timeout: 3s
    #       retries: 20

    #   web:
    #     build:
    #       context: .
    #       dockerfile: Dockerfile.dev
    #     environment:
    #       RAILS_ENV: development
    #       DATABASE_USER: postgres
    #       DATABASE_PASSWORD: postgres
    #       DATABASE_HOST: db
    #       # env_file:
    #       #   - .env.dev # (опционально) DATABASE_URL и др.
    #       # environment:
    #       # пример DATABASE_URL; либо настройте config/database.yml под docker-хосты
    #       DATABASE_URL: postgres://postgres:postgres@db:5432/app_development
    #       # RAILS_ENV: development
    #       NODE_ENV: development
    #       # чтобы rails 7 /up работал, если включен Rails::HealthController
    #       RAILS_LOG_TO_STDOUT: "1"
    #     volumes:
    #       - .:/app:cached
    #       - bundle:/bundle
    #     depends_on:
    #       db:
    #         # condition: service_healthy
    #         condition: service_started
    #     ports:
    #       - "3000:3000" # оставляем на всякий случай (доступ напрямую, минуя nginx)
    #     # healthcheck:
    #     #   test: [ "CMD-SHELL", "curl -fsS http://localhost:3000/ || exit 1" ]
    #     #   interval: 10s
    #     #   timeout: 3s
    #     #   retries: 20

    #     # js:
    #     #   # отдельный воркер для esbuild (watch)
    #     #   build:
    #     #     context: .
    #     #     dockerfile: Dockerfile.dev
    #     #   command: bash -lc 'yarn install && yarn build --watch'
    #     #   environment:
    #     #     NODE_ENV: development
    #     #   working_dir: /app
    #     #   volumes:
    #     #     - .:/app:cached
    #     #     - bundle:/bundle
    #     #   depends_on:
    #     #     web:
    #     #       condition: service_started

    #   nginx:
    #     image: nginx:1.27-alpine
    #     depends_on:
    #       web:
    #         # condition: service_healthy
    #         condition: service_started
    #     ports:
    #       - "80:80"
    #     volumes:
    #       - ./nginx/app.conf:/etc/nginx/conf.d/default.conf:ro
    #     # healthcheck:
    #     #   test: [ "CMD-SHELL", "curl -fsS http://app.localhost/health || exit 1" ]
    #     #   interval: 10s
    #     #   timeout: 3s
    #     #   retries: 20

    # volumes:
    #   pgdata:
    #   bundle:
